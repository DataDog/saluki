//! Metric origin.

use std::{fmt, hash::Hasher as _, num::NonZeroU32};

use serde::Deserialize;

use crate::tags::TagSet;

/// The cardinality of tags associated with the origin entity.
#[derive(Clone, Copy, Debug, Deserialize, Eq, Hash, PartialEq)]
#[serde(try_from = "String")]
pub enum OriginTagCardinality {
    /// No cardinality.
    ///
    /// This implies that no tags should be added to the metric based on its origin.
    None,

    /// Low cardinality.
    ///
    /// This generally covers tags which are static, or relatively slow to change, and generally results in a small
    /// number of unique values for the given tag key.
    Low,

    /// Orchestrator cardinality.
    ///
    /// This generally covers orchestrator-specific tags, such as Kubernetes pod UID, and lands somewhere between low
    /// and high cardinality.
    Orchestrator,

    /// High cardinality.
    ///
    /// This generally covers tags which frequently change and generally results in a large number of unique values for
    /// the given tag key.
    High,
}

impl<'a> TryFrom<&'a str> for OriginTagCardinality {
    type Error = String;

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
            "none" => Ok(Self::None),
            "low" => Ok(Self::Low),
            "high" => Ok(Self::High),
            "orch" | "orchestrator" => Ok(Self::Orchestrator),
            other => Err(format!("unknown tag cardinality type '{}'", other)),
        }
    }
}

impl TryFrom<String> for OriginTagCardinality {
    type Error = String;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        Self::try_from(value.as_str())
    }
}

impl fmt::Display for OriginTagCardinality {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::None => write!(f, "none"),
            Self::Low => write!(f, "low"),
            Self::Orchestrator => write!(f, "orchestrator"),
            Self::High => write!(f, "high"),
        }
    }
}

/// Information about the entity where a metric originated from.
///
/// Metrics contain metadata about their origin, in terms of the metric's _reason_ for existing: the metric was ingested
/// via DogStatsD, or was generated by an integration, and so on. However, there is also the concept of a metric
/// originating from a particular _entity_, such as a specific Kubernetes container. This relates directly to the
/// specific sender of the metric, which is used to enrich the metric with additional tags describing the origin entity.
///
/// The origin entity will generally be the process ID of the metric sender, or the container ID, both of which are then
/// generally mapped to the relevant information for the metric, such as the orchestrator-level tags for the
/// container/pod/deployment.
#[derive(Clone, Debug, Default, Eq, Hash, PartialEq)]
pub struct OriginInfo<'a> {
    /// Process ID of the sender.
    process_id: Option<NonZeroU32>,

    /// Container ID of the sender.
    ///
    /// This will generally be the typical long hexadecimal string that is used by container runtimes like `containerd`,
    /// but may sometimes also be a different form, such as the container's cgroups inode.
    container_id: Option<&'a str>,

    /// Pod UID of the sender.
    ///
    /// This is generally only used in Kubernetes environments to uniquely identify the pod. UIDs are equivalent to UUIDs.
    pod_uid: Option<&'a str>,

    /// Desired cardinality of any tags associated with the entity.
    ///
    /// This controls the cardinality of the tags added to this metric when enriching based on the available entity IDs.
    cardinality: Option<OriginTagCardinality>,

    /// External Data of the sender.
    ///
    /// See [`ExternalData`][saluki_env::workload::ExternalData] for more information.
    external_data: Option<&'a str>,
}

impl<'a> OriginInfo<'a> {
    /// Sets the process ID of the sender.
    ///
    /// Must be a non-zero value. If the value is zero, it is silently ignored.
    pub fn set_process_id(&mut self, process_id: u32) {
        self.process_id = NonZeroU32::new(process_id);
    }

    /// Gets the process ID of the sender.
    pub fn process_id(&self) -> Option<u32> {
        self.process_id.map(NonZeroU32::get)
    }

    /// Sets the container ID of the sender.
    pub fn set_container_id(&mut self, container_id: impl Into<Option<&'a str>>) {
        self.container_id = container_id.into();
    }

    /// Gets the container ID of the sender.
    pub fn container_id(&self) -> Option<&str> {
        self.container_id
    }

    /// Sets the pod UID of the sender.
    pub fn set_pod_uid(&mut self, pod_uid: impl Into<Option<&'a str>>) {
        self.pod_uid = pod_uid.into();
    }

    /// Gets the pod UID of the sender.
    pub fn pod_uid(&self) -> Option<&str> {
        self.pod_uid
    }

    /// Sets the desired cardinality of any tags associated with the entity.
    pub fn set_cardinality(&mut self, cardinality: impl Into<Option<OriginTagCardinality>>) {
        self.cardinality = cardinality.into();
    }

    /// Gets the desired cardinality of any tags associated with the entity.
    pub fn cardinality(&self) -> Option<OriginTagCardinality> {
        self.cardinality.as_ref().copied()
    }

    /// Sets the external data of the sender.
    pub fn set_external_data(&mut self, external_data: impl Into<Option<&'a str>>) {
        self.external_data = external_data.into();
    }

    /// Gets the external data of the sender.
    pub fn external_data(&self) -> Option<&str> {
        self.external_data
    }
}

impl<'a> std::fmt::Display for OriginInfo<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut has_written = false;

        write!(f, "OriginInfo(")?;

        if let Some(process_id) = self.process_id {
            write!(f, "process_id={}", process_id)?;
        }

        if let Some(container_id) = self.container_id {
            if has_written {
                write!(f, " ")?;
            } else {
                has_written = true;
            }
            write!(f, "container_id={}", container_id)?;
        }

        if let Some(pod_uid) = self.pod_uid {
            if has_written {
                write!(f, " ")?;
            } else {
                has_written = true;
            }
            write!(f, "pod_uid={}", pod_uid)?;
        }

        if let Some(cardinality) = self.cardinality {
            if has_written {
                write!(f, " ")?;
            } else {
                has_written = true;
            }
            write!(f, "cardinality={}", cardinality)?;
        }

        if let Some(external_data) = self.external_data {
            if has_written {
                write!(f, " ")?;
            }
            write!(f, "external_data={}", external_data)?;
        }

        write!(f, ")")
    }
}

/// A key that uniquely identifies the origin of a metric.
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct OriginKey(u64);

impl OriginKey {
    /// Creates a new `OriginKey` from the given opaque value by hashing it.
    pub fn from_opaque<O>(opaque: O) -> Self
    where
        O: std::hash::Hash,
    {
        let mut hasher = ahash::AHasher::default();
        opaque.hash(&mut hasher);
        Self(hasher.finish())
    }
}

impl std::hash::Hash for OriginKey {
    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
        self.0.hash(state);
    }
}

/// A value capable of collecting enriched tags for a metric based on its origin information.
pub trait OriginEnricher {
    /// Resolves the origin key for the given origin information.
    ///
    /// If the given origin information cannot be found/resolved, `None` is returned.
    fn resolve_origin_key(&self, origin_info: &OriginInfo<'_>) -> Option<OriginKey>;

    /// Collects the tags associated with the given origin key into the provided `TagSet`.
    fn collect_origin_tags(&self, origin_key: OriginKey, tags: &mut TagSet);
}
