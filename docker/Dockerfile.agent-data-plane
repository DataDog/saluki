ARG DD_AGENT_VERSION=7.68.3-jmx
ARG DD_AGENT_IMAGE=registry.ddbuild.io/images/datadog-agent:${DD_AGENT_VERSION}

ARG BUILD_IMAGE=alpine:3.20.8
ARG APP_IMAGE
ARG BUILDER_BASE=builder

# Build the agent image, which we need to copy the embedded Python from.
FROM ${DD_AGENT_IMAGE} AS agent

FROM ${BUILD_IMAGE} AS builder

ARG TARGETARCH
ARG RUST_VERSION=stable
ARG BUILD_PROFILE=release
ARG BUILD_FEATURES=default
ARG CARGO_BUILD_JOBS=default
ARG APP_FULL_NAME=""
ARG APP_SHORT_NAME=""
ARG APP_IDENTIFIER=""
ARG APP_GIT_HASH=""
ARG APP_VERSION=""
ARG APP_BUILD_TIME=""

ENV APP_FULL_NAME=${APP_FULL_NAME}
ENV APP_SHORT_NAME=${APP_SHORT_NAME}
ENV APP_IDENTIFIER=${APP_IDENTIFIER}
ENV APP_GIT_HASH=${APP_GIT_HASH}
ENV APP_VERSION=${APP_VERSION}
ENV APP_BUILD_TIME=${APP_BUILD_TIME}

# Install Rust and other build dependencies.
#
# no-dd-sa: We don't care about pinning package versions in the build stage.
RUN apk update && \
    apk add --no-cache rustup musl-dev linux-headers make cmake gcc libgcc perl go protobuf && \
   rustup-init -y --default-toolchain ${RUST_VERSION}
ENV PATH="/root/.cargo/bin:${PATH}"

# If we're building with Python checks, we pull from the Datadog Agent image (builder-python) to grab
# the same embedded Python version, and adjust our paths so that it gets used during compilation.
FROM builder-python AS builder-python

COPY --from=agent "/opt/datadog-agent/embedded" "/opt/datadog-agent/embedded"
ENV LD_LIBRARY_PATH="/opt/datadog-agent/embedded/lib:${LD_LIBRARY_PATH}"
ENV PATH="/opt/datadog-agent/embedded/bin:${PATH}"

# Build Agent Data plane.
FROM ${BUILDER_BASE} AS final

WORKDIR /adp
COPY . /adp
RUN mkdir -p /adp/target/bin &&  cargo build --profile ${BUILD_PROFILE} --package agent-data-plane --features ${BUILD_FEATURES} --target-dir /adp/target && \
cp /adp/target/${BUILD_PROFILE}/agent-data-plane /adp/target/bin/

# Calculate the necessary licenses that we need to include in the final image.
FROM ${BUILD_IMAGE} AS license-builder

RUN apk update && apk add --no-cache curl

# Pull down the latest SPDX licenses archive.
RUN curl -s -L -o /tmp/spdx-license-list-data-3.25.0.tar.gz https://github.com/spdx/license-list-data/archive/refs/tags/v3.25.0.tar.gz && \
    tar -C /tmp -xzf /tmp/spdx-license-list-data-3.25.0.tar.gz && \
    mv /tmp/license-list-data-3.25.0 /tmp/spdx-licenses

# Pull in our LICENSE-3rdparty.csv file and analyze it to figure out which licenses we need a copy of.
COPY LICENSE-3rdparty.csv /tmp/LICENSE-3rdparty.csv
RUN mkdir /licenses
RUN tail -n +2 /tmp/LICENSE-3rdparty.csv | awk -F ',' '{print $3}' | awk -F' ' '{for(i=1;i<=NF;i++) print $i}' | \
    grep -v -E "(OR|AND|WITH|Custom|LLVM-exception)" | sed s/[\(\)]// | sort | uniq | \
    xargs -I {} cp /tmp/spdx-licenses/text/{}.txt /licenses/THIRD-PARTY-{}

# Now stick our resulting binary and licenses in a clean image.
FROM ${APP_IMAGE}

# Only install ca-certificates if the directory doesn't exist.
#
# We do this because we don't want to set the user to `root` in the application image, but we need `root` to use
# `apt-get`... so if we're building in CI where CA certificates are already present, and the base image doesn't use the
# `root` user, we skip this step.
#
# For local builds, the regular Ubuntu application image needs to have the CA certificates installed, but it also uses
# the `root` user, so we can install them without issue.
USER root
RUN test -d /usr/share/ca-certificates || (apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates=20240203 && \
    apt-get clean && rm -rf /var/lib/apt/lists)
COPY --from=final /adp/target/bin/agent-data-plane /usr/local/bin/agent-data-plane
COPY NOTICE LICENSE LICENSE-3rdparty.csv /opt/datadog/agent-data-plane/
COPY --from=license-builder /licenses /opt/datadog/agent-data-plane/LICENSES
COPY --chmod=755 docker/entrypoint.sh /entrypoint.sh

ENTRYPOINT [ "/usr/local/bin/agent-data-plane" ]
