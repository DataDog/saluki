ARG DD_AGENT_VERSION=7.58.0-jmx
ARG DD_AGENT_IMAGE=datadog/agent:${DD_AGENT_VERSION}
ARG BUILD_IMAGE
ARG APP_IMAGE

FROM ${DD_AGENT_IMAGE} as agent
FROM ${BUILD_IMAGE} AS builder

ARG TARGETARCH
ARG BUILD_PROFILE=release

# Install basic utilities and an updated compiler/binutils toolchain, which is necessary for compiling.
#
# We only install cmake if it doesn't already exists, since the package name is different between the build image for
# local development (Debian Buster, where it's `cmake`) and the build image for CI (Ubuntu 14.04, where it's `cmake3`).
#
# Our CI build image already installs `cmake3`, though, so we just need to handle the local development case here.
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates curl unzip && \
    (which cmake >/dev/null || apt-get install -y --no-install-recommends cmake)

# ensure the ca-certs we just grabbed are installed before curling
RUN update-ca-certificates

# Saw in logs that curl is expecting ssl certs at `/etc/pki/tls/certs/ca-bundle.crt`,
# but they're actually at `/etc/ssl/certs/ca-certificates.crt`
ENV CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt


# Install Go, which we need to build AWS-LC in FIPS-compliant mode.
ENV PATH="/usr/local/go/bin:${PATH}"
RUN curl -v -s -L -o /tmp/go-1.23.0.tar.gz https://go.dev/dl/go1.23.0.linux-${TARGETARCH}.tar.gz
RUN tar -C /usr/local -xzf /tmp/go-1.23.0.tar.gz

# Install Protocol Buffers compiler by hand, since we want a specific minimum version that Debian Buster does not have.
COPY .ci/install-protoc.sh /
RUN chmod +x /install-protoc.sh && /install-protoc.sh

# Docs here https://pyo3.rs/v0.14.5/building_and_distribution#configuring-the-python-version
# If needed, ENV PYO3_PYTHON="/opt/datadog-agent/embedded/bin/python3.12" could be used, but auto-detection works in our case
COPY --from=agent "/opt/datadog-agent/embedded" "/opt/datadog-agent/embedded"
ENV LD_LIBRARY_PATH="/opt/datadog-agent/embedded/lib:${LD_LIBRARY_PATH}"
ENV PATH="/opt/datadog-agent/embedded/bin:${PATH}"

# Build ADP, and strip the binary to to optimize the size.
WORKDIR /adp
COPY . /adp
RUN cargo build --profile ${BUILD_PROFILE}

# Now stick our resulting binary in a clean image.
FROM ${APP_IMAGE}

# Redeclare the input argument to take the global-scope's value
ARG BUILD_PROFILE

USER root
RUN apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
COPY --from=builder /adp/target/*/agent-data-plane /usr/local/bin/agent-data-plane
COPY NOTICE LICENSE LICENSE-3rdparty.csv /opt/datadog/agent-data-plane/

# Copy the Datadog Agent's embedded Python environment into the image to resolve Python dependencies
COPY --from=agent "/opt/datadog-agent/embedded" "/opt/datadog-agent/embedded"
ENV LD_LIBRARY_PATH="/opt/datadog-agent/embedded/lib:${LD_LIBRARY_PATH}"
ENV PATH="/opt/datadog-agent/embedded/bin:${PATH}"
# Also copy the conf.d to get default integration configurations
COPY --from=agent "/etc/datadog-agent/conf.d" "/etc/datadog-agent/conf.d"

# HACK(tobz): SMP currently fails to run experiments if `/etc/<target name>` doesn't exist... so we're populating this
# directory manually for the time being to get ADP benchmarks running.
RUN mkdir /etc/saluki

ENTRYPOINT [ "/usr/local/bin/agent-data-plane" ]