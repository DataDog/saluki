ARG DD_AGENT_VERSION=latest-jmx
ARG DD_AGENT_IMAGE=datadog/agent:${DD_AGENT_VERSION}

ARG BUILD_IMAGE
ARG APP_IMAGE

# Build the agent image, which we need to copy the embedded Python from.
FROM ${DD_AGENT_IMAGE} AS agent

FROM ${BUILD_IMAGE} AS builder

ARG TARGETARCH
ARG BUILD_PROFILE=release
ARG BUILD_FEATURES=default
ARG APP_FULL_NAME=""
ARG APP_SHORT_NAME=""
ARG APP_IDENTIFIER=""
ARG APP_GIT_HASH=""
ARG APP_VERSION=""
ARG APP_BUILD_TIME=""

ENV APP_FULL_NAME=${APP_FULL_NAME}
ENV APP_SHORT_NAME=${APP_SHORT_NAME}
ENV APP_IDENTIFIER=${APP_IDENTIFIER}
ENV APP_GIT_HASH=${APP_GIT_HASH}
ENV APP_VERSION=${APP_VERSION}
ENV APP_BUILD_TIME=${APP_BUILD_TIME}

# Install basic utilities and an updated compiler/binutils toolchain, which is necessary for compiling.
#
# We only install cmake if it doesn't already exists, since the package name is different between the build image for
# local development (Debian Buster, where it's `cmake`) and the build image for CI (Ubuntu 14.04, where it's `cmake3`).
#
# Our CI build image already installs `cmake3`, though, so we just need to handle the local development case here.

# no-dd-sa: We don't care about pinning package versions in the build stage.
RUN apt-get update && \
    apt-get install -y --no-install-recommends curl ca-certificates unzip && \
    (which cmake >/dev/null || apt-get install -y --no-install-recommends cmake)
    
# Docs here https://pyo3.rs/v0.14.5/building_and_distribution#configuring-the-python-version
# If needed, ENV PYO3_PYTHON="/opt/datadog-agent/embedded/bin/python3.12" could be used, but auto-detection works in our case
COPY --from=agent "/opt/datadog-agent/embedded" "/opt/datadog-agent/embedded"
ENV LD_LIBRARY_PATH="/opt/datadog-agent/embedded/lib:${LD_LIBRARY_PATH}"
ENV PATH="/opt/datadog-agent/embedded/bin:${PATH}"
    
# Build Checks Agent.
WORKDIR /checks-agent
COPY . /checks-agent
RUN mkdir -p /checks-agent/target/bin &&  cargo build --profile ${BUILD_PROFILE} --package checks-agent --features ${BUILD_FEATURES} --target-dir /checks-agent/target && \
cp /checks-agent/target/${BUILD_PROFILE}/checks-agent /checks-agent/target/bin/

# Calculate the necessary licenses that we need to include in the final image.
FROM ${BUILD_IMAGE} AS license-builder

# Pull down the latest SPDX licenses archive.
RUN curl -s -L -o /tmp/spdx-license-list-data-3.25.0.tar.gz https://github.com/spdx/license-list-data/archive/refs/tags/v3.25.0.tar.gz && \
    tar -C /tmp -xzf /tmp/spdx-license-list-data-3.25.0.tar.gz && \
    mv /tmp/license-list-data-3.25.0 /tmp/spdx-licenses

# Pull in our LICENSE-3rdparty.csv file and analyze it to figure out which licenses we need a copy of.
COPY LICENSE-3rdparty.csv /tmp/LICENSE-3rdparty.csv
RUN mkdir /licenses
RUN tail -n +2 /tmp/LICENSE-3rdparty.csv | awk -F ',' '{print $3}' | awk -F' ' '{for(i=1;i<=NF;i++) print $i}' | \
    grep -v -E "(OR|AND|WITH|Custom|LLVM-exception)" | sed s/[\(\)]// | sort | uniq | \
    xargs -I {} cp /tmp/spdx-licenses/text/{}.txt /licenses/THIRD-PARTY-{}

# Now stick our resulting binary and licenses in a clean image.
FROM ${APP_IMAGE}

# Docs here https://pyo3.rs/v0.14.5/building_and_distribution#configuring-the-python-version
# If needed, ENV PYO3_PYTHON="/opt/datadog-agent/embedded/bin/python3.12" could be used, but auto-detection works in our case
ENV LD_LIBRARY_PATH="/opt/datadog-agent/embedded/lib:${LD_LIBRARY_PATH}"
ENV PATH="/opt/datadog-agent/embedded/bin:${PATH}"

# Only install ca-certificates if the directory doesn't exist.
#
# We do this because we don't want to set the user to `root` in the application image, but we need `root` to use
# `apt-get`... so if we're building in CI where CA certificates are already present, and the base image doesn't use the
# `root` user, we skip this step.
#
# For local builds, the regular Ubuntu application image needs to have the CA certificates installed, but it also uses
# the `root` user, so we can install them without issue.
USER root
RUN test -d /usr/share/ca-certificates || (apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates=20240203~22.04.1 && \
    apt-get clean && rm -rf /var/lib/apt/lists)
COPY --from=builder /checks-agent/target/bin/checks-agent /usr/local/bin/checks-agent
# Copy the Datadog Agent's embedded Python environment into the image to resolve Python dependencies
COPY --from=agent "/opt/datadog-agent/embedded" "/opt/datadog-agent/embedded"
ENV LD_LIBRARY_PATH="/opt/datadog-agent/embedded/lib:${LD_LIBRARY_PATH}"
ENV PATH="/opt/datadog-agent/embedded/bin:${PATH}"
COPY NOTICE LICENSE LICENSE-3rdparty.csv /opt/datadog/checks-agent/
COPY --from=license-builder /licenses /opt/datadog/checks-agent/LICENSES

ENTRYPOINT [ "/usr/local/bin/checks-agent" ]
