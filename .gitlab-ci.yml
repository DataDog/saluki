include:
  - .gitlab/*.yml

stages:
  - internal
  - test
  - build
  - correctness
  - benchmark
  - release

variables:
  # High-level repository paths we build off of, and dedicated images needed for various jobs.
  IMAGE_REGISTRY: "registry.ddbuild.io"
  DOCKER_BUILD_IMAGE: "486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:24.0.4-gbi-focal"
  GBI_BASE_IMAGE: "${IMAGE_REGISTRY}/images/base/gbi-ubuntu_2204:release"

  # Base repository paths for where our CI images go, whether they're helper images or actual
  # output artifacts like ADP itself.
  SALUKI_IMAGE_REPO_PREFIX: "saluki"
  SALUKI_IMAGE_REPO_BASE: "${IMAGE_REGISTRY}/${SALUKI_IMAGE_REPO_PREFIX}"
  SALUKI_BUILD_CI_IMAGE: "${SALUKI_IMAGE_REPO_BASE}/build-ci:latest"
  SALUKI_GENERAL_CI_IMAGE: "${SALUKI_IMAGE_REPO_BASE}/general-ci:latest"
  SALUKI_SMP_CI_IMAGE: "${SALUKI_IMAGE_REPO_BASE}/smp-ci:latest"

  # Converged Datadog Agent-specific variables, which control how we build the converged Datadog Agent image, both for
  # internal and public releases.
  BASE_DD_AGENT_VERSION: "7.65.0-rc.9"
  BASE_DD_AGENT_VERSION_INTERNAL: "7-65-0-rc-9"

  INTERNAL_DD_AGENT_IMAGE: "${IMAGE_REGISTRY}/datadog-agent:${BASE_DD_AGENT_VERSION_INTERNAL}-full"
  INTERNAL_DD_AGENT_IMAGE_FIPS: "${IMAGE_REGISTRY}/datadog-agent:${BASE_DD_AGENT_VERSION_INTERNAL}-fips-jmx"
  PUBLIC_DD_AGENT_IMAGE_BASE: "gcr.io/datadoghq/agent"
  PUBLIC_DD_AGENT_IMAGE: "${PUBLIC_DD_AGENT_IMAGE_BASE}:${BASE_DD_AGENT_VERSION}"

default:
  tags: ["arch:amd64"]

# Run a job on official releases (i.e. tagged).
.on_official_release:
  rules:
    if: $CI_COMMIT_TAG

# Common build-specific variables that need to be shared across stages.
.build-common-variables:
  variables:
    ADP_IMAGE_REPO_NAME: "${SALUKI_IMAGE_REPO_PREFIX}/agent-data-plane"
    ADP_IMAGE_BASE: "${IMAGE_REGISTRY}/${ADP_IMAGE_REPO_NAME}"
    CHECKS_AGENT_IMAGE_REPO_NAME: "${SALUKI_IMAGE_REPO_PREFIX}/checks-agent"
    CHECKS_AGENT_IMAGE_BASE: "${IMAGE_REGISTRY}/${CHECKS_AGENT_IMAGE_REPO_NAME}"

    # The only difference between the debug and release images are that debug images are marked in such a way that
    # any part of the code that reports the ADP "build" info -- version, Git hash, etc -- will indicate that the build
    # is a development build. This is meant to highlight the difference between running a one-off version of ADP and a
    # versioned release.
    #
    # Beyond that, both debug and release builds are built with release optimizations _and_ include debug symbols. :)
    ADP_DEBUG_IMAGE_TAG: "${ADP_IMAGE_BASE}:${CI_COMMIT_SHORT_SHA}"
    ADP_DEBUG_IMAGE_TAG_FIPS: "${ADP_IMAGE_BASE}:${CI_COMMIT_SHORT_SHA}-fips"
    ADP_RELEASE_IMAGE_TAG: "${ADP_IMAGE_BASE}:${CI_COMMIT_TAG}-release"
    ADP_RELEASE_IMAGE_TAG_FIPS: "${ADP_IMAGE_BASE}:${CI_COMMIT_TAG}-fips-release"
    BUILD_PROFILE: "optimized-release"
    BUILD_FEATURES: "default"
    FIPS_ENABLED: "false"
    APP_DEV_BUILD: "false"

.linux-test-job:
  image: "${SALUKI_BUILD_CI_IMAGE}"

.linux-amd64-test-job:
  extends: .linux-test-job
  tags: ["arch:amd64"]

.linux-amd64-test-job-heavy:
  extends: .linux-amd64-test-job
  variables:
    # Compiling Saluki is intensive, so we want to make sure we get
    # a beefy-enough runner.
    KUBERNETES_CPU_REQUEST: "16"
    KUBERNETES_MEMORY_REQUEST: "8Gi"
    KUBERNETES_MEMORY_LIMIT: "12Gi"

.linux-arm64-test-job:
  extends: .linux-test-job
  tags: ["arch:arm64"]

.linux-arm64-test-job-heavy:
  extends: .linux-arm64-test-job
  variables:
    # Compiling Saluki is intensive, so we want a beefy runner.
    KUBERNETES_CPU_REQUEST: "16"
    KUBERNETES_MEMORY_REQUEST: "8Gi"
    KUBERNETES_MEMORY_LIMIT: "12Gi"

.macos-amd64-test-job:
  tags: ["macos:ventura-amd64", "specific:true"]

.macos-arm64-test-job:
  tags: ["macos:ventura-arm64", "specific:true"]
