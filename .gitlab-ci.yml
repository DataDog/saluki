include:
  - .gitlab/*.yml

stages:
  - test
  - build
  - correctness
  - benchmark
  - release
  - internal

variables:
  # High-level repository paths we build off of, and dedicated images needed for various jobs.
  IMAGE_REGISTRY: "registry.ddbuild.io"
  DOCKER_BUILD_IMAGE: "486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:24.0.4-gbi-focal"
  GBI_BASE_IMAGE: "${IMAGE_REGISTRY}/images/base/gbi-ubuntu_2204:release"

  # Base repository paths for where our CI images go, whether they're helper images or actual
  # output artifacts like ADP itself.
  SALUKI_IMAGE_REPO_PREFIX: "saluki"
  SALUKI_IMAGE_REPO_BASE: "${IMAGE_REGISTRY}/${SALUKI_IMAGE_REPO_PREFIX}"
  SALUKI_BUILD_CI_IMAGE: "${SALUKI_IMAGE_REPO_BASE}/build-ci:latest"
  SALUKI_GENERAL_CI_IMAGE: "${SALUKI_IMAGE_REPO_BASE}/general-ci:latest"
  SALUKI_SMP_CI_IMAGE: "${SALUKI_IMAGE_REPO_BASE}/smp-ci:latest"

  # Converged Datadog Agent-specific variables, which control how we build the converged Datadog Agent image that we
  # publicly publish.
  PUBLIC_DD_AGENT_VERSION: "7.65.2"

default:
  tags: ["arch:amd64"]

# Run a job on official releases (i.e. tagged).
.on_official_release:
  rules:
    if: $CI_COMMIT_TAG

# Common build-specific variables that need to be shared across stages.
.build-common-variables:
  variables:
    ADP_IMAGE_REPO_NAME: "${SALUKI_IMAGE_REPO_PREFIX}/agent-data-plane"
    ADP_IMAGE_BASE: "${IMAGE_REGISTRY}/${ADP_IMAGE_REPO_NAME}"

    # Base images to copy Agent Data Plane into, depending on whether the image is meant for our internal environment or
    # public registries.
    ADP_INTERNAL_BASE_IMAGE: "${GBI_BASE_IMAGE}"
    ADP_PUBLIC_BASE_IMAGE: "ubuntu:24.04"

    # We use our specific build image as it's built to have the right (specifically: old enough) version of glibc, and
    # other necessary tooling, to build ADP for the target platforms we need it to be able to run on.
    ADP_BUILD_IMAGE: "${SALUKI_BUILD_CI_IMAGE}"

    # Both internal and release builds are built with release optimizations _and_ include debug symbols, but "internal"
    # images are marked in a way that they always consider themselves "development" builds in terms of versioning
    # information, etc.
    ADP_INTERNAL_IMAGE: "${ADP_IMAGE_BASE}:${ADP_INTERNAL_IMAGE_TAG}"
    ADP_INTERNAL_IMAGE_FIPS: "${ADP_IMAGE_BASE}:${ADP_INTERNAL_IMAGE_TAG_FIPS}"
    ADP_RELEASE_IMAGE: "${ADP_IMAGE_BASE}:${ADP_RELEASE_IMAGE_TAG}"
    ADP_RELEASE_IMAGE_FIPS: "${ADP_IMAGE_BASE}:${ADP_RELEASE_IMAGE_TAG_FIPS}"

    ADP_INTERNAL_IMAGE_TAG: "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
    ADP_INTERNAL_IMAGE_TAG_FIPS: "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-fips"
    ADP_RELEASE_IMAGE_TAG: "${CI_COMMIT_TAG}-release"
    ADP_RELEASE_IMAGE_TAG_FIPS: "${CI_COMMIT_TAG}-fips-release"
    BUILD_PROFILE: "optimized-release"
    BUILD_FEATURES: "default"
    FIPS_ENABLED: "false"

.build-internal-variables:
  variables:
    ADP_APP_IMAGE: "${ADP_INTERNAL_BASE_IMAGE}"
    ADP_IMAGE_VERSION: "${CI_COMMIT_SHA}"
    APP_DEV_BUILD: "true"

.build-release-variables:
  variables:
    ADP_APP_IMAGE: "${ADP_PUBLIC_BASE_IMAGE}"
    ADP_IMAGE_VERSION: "${CI_COMMIT_TAG}"
    APP_DEV_BUILD: "false"

.linux-test-job:
  image: "${SALUKI_BUILD_CI_IMAGE}"

.linux-amd64-test-job:
  extends: .linux-test-job
  tags: ["arch:amd64"]

.linux-amd64-test-job-heavy:
  extends: .linux-amd64-test-job
  variables:
    # Compiling Saluki is intensive, so we want to make sure we get
    # a beefy-enough runner.
    KUBERNETES_CPU_REQUEST: "16"
    KUBERNETES_MEMORY_REQUEST: "8Gi"
    KUBERNETES_MEMORY_LIMIT: "12Gi"

.linux-arm64-test-job:
  extends: .linux-test-job
  tags: ["arch:arm64"]

.linux-arm64-test-job-heavy:
  extends: .linux-arm64-test-job
  variables:
    # Compiling Saluki is intensive, so we want a beefy runner.
    KUBERNETES_CPU_REQUEST: "16"
    KUBERNETES_MEMORY_REQUEST: "8Gi"
    KUBERNETES_MEMORY_LIMIT: "12Gi"

.macos-amd64-test-job:
  tags: ["macos:ventura-amd64", "specific:true"]

.macos-arm64-test-job:
  tags: ["macos:ventura-arm64", "specific:true"]
