(function() {
    var type_impls = Object.fromEntries([["saluki_common",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1240-1244\">Source</a><a href=\"#impl-Clone-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1246\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","saluki_common::collections::FastConcurrentHashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1150-1154\">Source</a><a href=\"#impl-Debug-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1156\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","saluki_common::collections::FastConcurrentHashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#239-241\">Source</a><a href=\"#impl-Default-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#243\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","saluki_common::collections::FastConcurrentHashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1209-1212\">Source</a><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1214\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iter: T) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(K, V)>","saluki_common::collections::FastConcurrentHashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#248\">Source</a><a href=\"#impl-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#270\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.with_hasher\" class=\"fn\">with_hasher</a>(hash_builder: S) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashMap</code> which will use the given hash builder to hash\nkeys.</p>\n<p>Warning: <code>hash_builder</code> is normally randomly generated, and is designed\nto allow HashMaps to be resistant to attacks that cause many collisions\nand very poor performance. Setting it manually using this function can\nexpose a DoS attack vector.</p>\n<p>The <code>hash_builder</code> passed should implement the <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\"><code>BuildHasher</code></a> trait for\nthe HashMap to be useful, see its documentation for details.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span>map = HashMap::with_hasher(s);\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#299\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.with_capacity_and_hasher\" class=\"fn\">with_capacity_and_hasher</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    hash_builder: S,\n) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty <code>HashMap</code> with at least the specified capacity, using\n<code>hash_builder</code> to hash the keys.</p>\n<p>The table should be able to hold at least <code>capacity</code> elements before resizing.\nHowever, the capacity is an estimate, and the table may prematurely resize due\nto poor hash distribution. If <code>capacity</code> is 0, the hash map will not allocate.</p>\n<p>Warning: <code>hash_builder</code> is normally randomly generated, and is designed\nto allow HashMaps to be resistant to attacks that cause many collisions\nand very poor performance. Setting it manually using this function can\nexpose a DoS attack vector.</p>\n<p>The <code>hasher</code> passed should implement the <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\"><code>BuildHasher</code></a> trait for\nthe HashMap to be useful, see its documentation for details.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n<span class=\"kw\">use </span>std::hash::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span>map = HashMap::with_capacity_and_hasher(<span class=\"number\">10</span>, s);\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pin\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#315\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.pin\" class=\"fn\">pin</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMapRef.html\" title=\"struct papaya::map::HashMapRef\">HashMapRef</a>&lt;'_, K, V, S, <a class=\"struct\" href=\"https://docs.rs/seize/0.5.0/seize/guard/struct.LocalGuard.html\" title=\"struct seize::guard::LocalGuard\">LocalGuard</a>&lt;'_&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a pinned reference to the map.</p>\n<p>The returned reference manages a guard internally, preventing garbage collection\nfor as long as it is held. See the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#usage\" title=\"mod papaya\">crate-level documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pin_owned\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#331\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.pin_owned\" class=\"fn\">pin_owned</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMapRef.html\" title=\"struct papaya::map::HashMapRef\">HashMapRef</a>&lt;'_, K, V, S, <a class=\"struct\" href=\"https://docs.rs/seize/0.5.0/seize/guard/struct.OwnedGuard.html\" title=\"struct seize::guard::OwnedGuard\">OwnedGuard</a>&lt;'_&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a pinned reference to the map.</p>\n<p>Unlike <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#method.pin\" title=\"method papaya::map::HashMap::pin\"><code>HashMap::pin</code></a>, the returned reference implements <code>Send</code> and <code>Sync</code>,\nallowing it to be held across <code>.await</code> points in work-stealing schedulers.\nThis is especially useful for iterators.</p>\n<p>The returned reference manages a guard internally, preventing garbage collection\nfor as long as it is held. See the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#usage\" title=\"mod papaya\">crate-level documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.guard\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#343\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.guard\" class=\"fn\">guard</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/seize/0.5.0/seize/guard/struct.LocalGuard.html\" title=\"struct seize::guard::LocalGuard\">LocalGuard</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a guard for use with this map.</p>\n<p>Note that holding on to a guard prevents garbage collection.\nSee the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#usage\" title=\"mod papaya\">crate-level documentation</a> for details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.owned_guard\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#356\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.owned_guard\" class=\"fn\">owned_guard</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://docs.rs/seize/0.5.0/seize/guard/struct.OwnedGuard.html\" title=\"struct seize::guard::OwnedGuard\">OwnedGuard</a>&lt;'_&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an owned guard for use with this map.</p>\n<p>Owned guards implement <code>Send</code> and <code>Sync</code>, allowing them to be held across\n<code>.await</code> points in work-stealing schedulers. This is especially useful\nfor iterators.</p>\n<p>Note that holding on to a guard prevents garbage collection.\nSee the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#usage\" title=\"mod papaya\">crate-level documentation</a> for details.</p>\n</div></details></div></details>",0,"saluki_common::collections::FastConcurrentHashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#361-364\">Source</a><a href=\"#impl-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#380\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of entries in the map.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\nmap.pin().insert(<span class=\"number\">2</span>, <span class=\"string\">\"b\"</span>);\n<span class=\"macro\">assert!</span>(map.len() == <span class=\"number\">2</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#397\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map is empty. Otherwise returns <code>false</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"macro\">assert!</span>(map.is_empty());\nmap.pin().insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert!</span>(!map.is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#422-424\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.contains_key\" class=\"fn\">contains_key</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>, guard: &amp;impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://docs.rs/equivalent/1.0.2/equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the map contains a value for the specified key.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#449-452\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.get\" class=\"fn\">get</a>&lt;'g, Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>, guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>&gt;<div class=\"where\">where\n    K: 'g,\n    Q: <a class=\"trait\" href=\"https://docs.rs/equivalent/1.0.2/equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.pin().get(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_key_value\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#480-482\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.get_key_value\" class=\"fn\">get_key_value</a>&lt;'g, Q&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>)&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://docs.rs/equivalent/1.0.2/equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns the key-value pair corresponding to the supplied key.</p>\n<p>The supplied key may be any borrowed form of the map’s key type, but\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().get_key_value(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)));\n<span class=\"macro\">assert_eq!</span>(map.pin().get_key_value(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#512\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.insert\" class=\"fn\">insert</a>&lt;'g&gt;(\n    &amp;self,\n    key: K,\n    value: V,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a key-value pair into the map.</p>\n<p>If the map did not have this key present, <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a> is returned.</p>\n<p>If the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be <code>==</code> without being identical. See the <a href=\"https://doc.rust-lang.org/std/collections/index.html#insert-and-complex-keys\">standard library\ndocumentation</a> for details.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"macro\">assert_eq!</span>(map.pin().insert(<span class=\"number\">37</span>, <span class=\"string\">\"a\"</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().is_empty(), <span class=\"bool-val\">false</span>);\n\nmap.pin().insert(<span class=\"number\">37</span>, <span class=\"string\">\"b\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().insert(<span class=\"number\">37</span>, <span class=\"string\">\"c\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"b\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.pin().get(<span class=\"kw-2\">&amp;</span><span class=\"number\">37</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"c\"</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#541-546\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.try_insert\" class=\"fn\">try_insert</a>&lt;'g&gt;(\n    &amp;self,\n    key: K,\n    value: V,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>, <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.OccupiedError.html\" title=\"struct papaya::map::OccupiedError\">OccupiedError</a>&lt;'g, V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to insert a key-value pair into the map, and returns\na reference to the value that was inserted.</p>\n<p>If the map already had this key present, nothing is updated, and\nan error containing the existing value is returned.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"kw\">let </span>map = map.pin();\n\n<span class=\"macro\">assert_eq!</span>(map.try_insert(<span class=\"number\">37</span>, <span class=\"string\">\"a\"</span>).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>);\n\n<span class=\"kw\">let </span>err = map.try_insert(<span class=\"number\">37</span>, <span class=\"string\">\"b\"</span>).unwrap_err();\n<span class=\"macro\">assert_eq!</span>(err.current, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(err.not_inserted, <span class=\"string\">\"b\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_insert_with\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#581-589\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.try_insert_with\" class=\"fn\">try_insert_with</a>&lt;'g, F&gt;(\n    &amp;self,\n    key: K,\n    f: F,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; V,\n    K: 'g,</div></h4></section></summary><div class=\"docblock\"><p>Tries to insert a key and value computed from a closure into the map,\nand returns a reference to the value that was inserted.</p>\n<p>If the map already had this key present, nothing is updated, and\nthe existing value is returned.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"kw\">let </span>map = map.pin();\n\n<span class=\"macro\">assert_eq!</span>(map.try_insert_with(<span class=\"number\">37</span>, || <span class=\"string\">\"a\"</span>).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>);\n\n<span class=\"kw\">let </span>current = map.try_insert_with(<span class=\"number\">37</span>, || <span class=\"string\">\"b\"</span>).unwrap_err();\n<span class=\"macro\">assert_eq!</span>(current, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#609\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.get_or_insert\" class=\"fn\">get_or_insert</a>&lt;'g&gt;(\n    &amp;self,\n    key: K,\n    value: V,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key, or inserts a default value.</p>\n<p>If the given key is present, the corresponding value is returned. If it is not present,\nthe provided <code>value</code> is inserted, and a reference to the newly inserted value is returned.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"macro\">assert_eq!</span>(map.pin().get_or_insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">3</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().get_or_insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">6</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_or_insert_with\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#636-639\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.get_or_insert_with\" class=\"fn\">get_or_insert_with</a>&lt;'g, F&gt;(\n    &amp;self,\n    key: K,\n    f: F,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; V,\n    K: 'g,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the value corresponding to the key, or inserts a default value\ncomputed from a closure.</p>\n<p>If the given key is present, the corresponding value is returned. If it is not present,\nthe value computed from <code>f</code> is inserted, and a reference to the newly inserted value is\nreturned.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"macro\">assert_eq!</span>(map.pin().get_or_insert_with(<span class=\"string\">\"a\"</span>, || <span class=\"number\">3</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().get_or_insert_with(<span class=\"string\">\"a\"</span>, || <span class=\"number\">6</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#674-677\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.update\" class=\"fn\">update</a>&lt;'g, F&gt;(\n    &amp;self,\n    key: K,\n    update: F,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; V,\n    K: 'g,</div></h4></section></summary><div class=\"docblock\"><p>Updates an existing entry atomically.</p>\n<p>If the value for the specified <code>key</code> is present, the new value is computed and stored the\nusing the provided update function, and the new value is returned. Otherwise, <code>None</code>\nis returned.</p>\n<p>The update function is given the current value associated with the given key and returns the\nnew value to be stored. The operation is applied atomically only if the state of the entry remains\nthe same, meaning that it is not concurrently modified in any way. If the entry is\nmodified, the operation is retried with the new entry, similar to a traditional <a href=\"https://en.wikipedia.org/wiki/Compare-and-swap\">compare-and-swap</a>\noperation.</p>\n<p>Note that the <code>update</code> function should be pure as it may be called multiple times, and the output\nfor a given entry may be memoized across retries.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\nmap.pin().insert(<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().get(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));\n\nmap.pin().update(<span class=\"string\">\"a\"</span>, |v| v + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().get(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_or_insert\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#700-709\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.update_or_insert\" class=\"fn\">update_or_insert</a>&lt;'g, F&gt;(\n    &amp;self,\n    key: K,\n    update: F,\n    value: V,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; V,\n    K: 'g,</div></h4></section></summary><div class=\"docblock\"><p>Updates an existing entry or inserts a default value.</p>\n<p>If the value for the specified <code>key</code> is present, the new value is computed and stored the\nusing the provided update function, and the new value is returned. Otherwise, the provided\n<code>value</code> is inserted into the map, and a reference to the newly inserted value is returned.</p>\n<p>See <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#method.update\" title=\"method papaya::map::HashMap::update\"><code>HashMap::update</code></a> for details about how atomic updates are performed.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.pin().update_or_insert(<span class=\"string\">\"a\"</span>, |i| i + <span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.pin().update_or_insert(<span class=\"string\">\"a\"</span>, |i| i + <span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"number\">1</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_or_insert_with\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#733-743\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.update_or_insert_with\" class=\"fn\">update_or_insert_with</a>&lt;'g, U, F&gt;(\n    &amp;self,\n    key: K,\n    update: U,\n    f: F,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; V,\n    U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; V,\n    K: 'g,</div></h4></section></summary><div class=\"docblock\"><p>Updates an existing entry or inserts a default value computed from a closure.</p>\n<p>If the value for the specified <code>key</code> is present, the new value is computed and stored the\nusing the provided update function, and the new value is returned. Otherwise, the value\ncomputed by <code>f</code> is inserted into the map, and a reference to the newly inserted value is\nreturned.</p>\n<p>See <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#method.update\" title=\"method papaya::map::HashMap::update\"><code>HashMap::update</code></a> for details about how atomic updates are performed.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.pin().update_or_insert_with(<span class=\"string\">\"a\"</span>, |i| i + <span class=\"number\">1</span>, || <span class=\"number\">0</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.pin().update_or_insert_with(<span class=\"string\">\"a\"</span>, |i| i + <span class=\"number\">1</span>, || <span class=\"number\">0</span>), <span class=\"number\">1</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compute\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#795-802\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.compute\" class=\"fn\">compute</a>&lt;'g, F, T&gt;(\n    &amp;self,\n    key: K,\n    compute: F,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"enum\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/enum.Compute.html\" title=\"enum papaya::map::Compute\">Compute</a>&lt;'g, K, V, T&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>)&gt;) -&gt; <a class=\"enum\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/enum.Operation.html\" title=\"enum papaya::map::Operation\">Operation</a>&lt;V, T&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Updates an entry with a compare-and-swap (CAS) function.</p>\n<p>This method allows you to perform complex operations on the map atomically. The <code>compute</code>\nclosure is given the current state of the entry and returns the operation that should be\nperformed. The operation is applied atomically only if the state of the entry remains the same,\nmeaning it is not concurrently modified in any way.</p>\n<p>Note that the <code>compute</code> function should be pure as it may be called multiple times, and\nthe output for a given entry may be memoized across retries.</p>\n<p>In most cases you can avoid this method and instead use a higher-level atomic operation.\nSee the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#atomic-operations\" title=\"mod papaya\">crate-level documentation</a> for details.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::{HashMap, Operation, Compute};\n\n<span class=\"kw\">let </span>map = HashMap::new();\n<span class=\"kw\">let </span>map = map.pin();\n\n<span class=\"kw\">let </span>compute = |entry| <span class=\"kw\">match </span>entry {\n    <span class=\"comment\">// Remove the value if it is even.\n    </span><span class=\"prelude-val\">Some</span>((_key, value)) <span class=\"kw\">if </span>value % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>=&gt; {\n        Operation::Remove\n    }\n\n    <span class=\"comment\">// Increment the value if it is odd.\n    </span><span class=\"prelude-val\">Some</span>((_key, value)) =&gt; {\n        Operation::Insert(value + <span class=\"number\">1</span>)\n    }\n\n    <span class=\"comment\">// Do nothing if the key does not exist\n    </span><span class=\"prelude-val\">None </span>=&gt; Operation::Abort(()),\n};\n\n<span class=\"macro\">assert_eq!</span>(map.compute(<span class=\"string\">'A'</span>, compute), Compute::Aborted(()));\n\nmap.insert(<span class=\"string\">'A'</span>, <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(map.compute(<span class=\"string\">'A'</span>, compute), Compute::Updated {\n    old: (<span class=\"kw-2\">&amp;</span><span class=\"string\">'A'</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>),\n    new: (<span class=\"kw-2\">&amp;</span><span class=\"string\">'A'</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>),\n});\n<span class=\"macro\">assert_eq!</span>(map.compute(<span class=\"string\">'A'</span>, compute), Compute::Removed(<span class=\"kw-2\">&amp;</span><span class=\"string\">'A'</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#825-828\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.remove\" class=\"fn\">remove</a>&lt;'g, Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>, guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>&gt;<div class=\"where\">where\n    K: 'g,\n    Q: <a class=\"trait\" href=\"https://docs.rs/equivalent/1.0.2/equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the value at the key if the key\nwas previously in the map.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.pin().remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_entry\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#855-858\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.remove_entry\" class=\"fn\">remove_entry</a>&lt;'g, Q&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>)&gt;<div class=\"where\">where\n    K: 'g,\n    Q: <a class=\"trait\" href=\"https://docs.rs/equivalent/1.0.2/equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the stored key and value if the\nkey was previously in the map.</p>\n<p>The key may be any borrowed form of the map’s key type, but\n<a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\"><code>Hash</code></a> and <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\"><code>Eq</code></a> on the borrowed form <em>must</em> match those for\nthe key type.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n<span class=\"macro\">assert_eq!</span>(map.pin().get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.pin().remove_entry(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)));\n<span class=\"macro\">assert_eq!</span>(map.pin().remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_if\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#888-896\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.remove_if\" class=\"fn\">remove_if</a>&lt;'g, Q, F&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Q</a>,\n    should_remove: F,\n    guard: &amp;'g impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>)&gt;, (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g V</a>)&gt;<div class=\"where\">where\n    Q: <a class=\"trait\" href=\"https://docs.rs/equivalent/1.0.2/equivalent/trait.Equivalent.html\" title=\"trait equivalent::Equivalent\">Equivalent</a>&lt;K&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Conditionally removes a key from the map based on the provided closure.</p>\n<p>If the key is found in the map and the closure returns <code>true</code> given the key and its value,\nthe key and value are returned successfully. Note that the returned entry is guaranteed to\nbe the same entry that the closure returned <code>true</code> for. However, the closure returning <code>true</code>\ndoes not guarantee that the entry is removed in the presence of concurrent modifications.</p>\n<p>If the key is not found in the map, <code>Ok(None)</code> is returned.</p>\n<p>If the closure returns <code>false</code>, an error is returned containing the entry provided to the closure.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(map.pin().remove_if(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, |k, v| <span class=\"kw-2\">*</span>v == <span class=\"string\">\"b\"</span>), <span class=\"prelude-val\">Err</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>)));\n<span class=\"macro\">assert_eq!</span>(map.pin().get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>));\n<span class=\"macro\">assert_eq!</span>(map.pin().remove_if(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, |k, v| <span class=\"kw-2\">*</span>v == <span class=\"string\">\"a\"</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"string\">\"a\"</span>))));\n<span class=\"macro\">assert_eq!</span>(map.pin().remove_if(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, |<span class=\"kw\">_</span>, <span class=\"kw\">_</span>| <span class=\"bool-val\">true</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"prelude-val\">None</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#923\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.reserve\" class=\"fn\">reserve</a>(&amp;self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, guard: &amp;impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>)</h4></section></summary><div class=\"docblock\"><p>Tries to reserve capacity for <code>additional</code> more elements to be inserted\nin the <code>HashMap</code>.</p>\n<p>After calling this method, the table should be able to hold at least <code>capacity</code> elements\nbefore resizing. However, the capacity is an estimate, and the table may prematurely resize\ndue to poor hash distribution. The collection may also reserve more space to avoid frequent\nreallocations.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the new allocation size overflows <code>usize</code>.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map: HashMap&lt;<span class=\"kw-2\">&amp;</span>str, i32&gt; = HashMap::new();\nmap.pin().reserve(<span class=\"number\">10</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#945\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;self, guard: &amp;impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>)</h4></section></summary><div class=\"docblock\"><p>Clears the map, removing all key-value pairs.</p>\n<p>Note that this method will block until any in-progress resizes are\ncompleted before proceeding. See the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#consistency\" title=\"mod papaya\">consistency</a>\nsection for details.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::new();\n\nmap.pin().insert(<span class=\"number\">1</span>, <span class=\"string\">\"a\"</span>);\nmap.pin().clear();\n<span class=\"macro\">assert!</span>(map.pin().is_empty());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#971-973\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;self, f: F, guard: &amp;impl <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all pairs <code>(k, v)</code> for which <code>f(&amp;k, &amp;v)</code> returns <code>false</code>.\nThe elements are visited in unsorted (and unspecified) order.</p>\n<p>Note the function may be called more than once for a given key if its value is\nconcurrently modified during removal.</p>\n<p>Additionally, this method will block until any in-progress resizes are\ncompleted before proceeding. See the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#consistency\" title=\"mod papaya\">consistency</a>\nsection for details.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: HashMap&lt;i32, i32&gt; = (<span class=\"number\">0</span>..<span class=\"number\">8</span>).map(|x| (x, x * <span class=\"number\">10</span>)).collect();\nmap.pin().retain(|<span class=\"kw-2\">&amp;</span>k, <span class=\"kw\">_</span>| k % <span class=\"number\">2 </span>== <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">4</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1000-1002\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.iter\" class=\"fn\">iter</a>&lt;'g, G&gt;(&amp;self, guard: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g G</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.Iter.html\" title=\"struct papaya::map::Iter\">Iter</a>&lt;'g, K, V, G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,</div></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order.\nThe iterator element type is <code>(&amp;K, &amp;V)</code>.</p>\n<p>Note that this method will block until any in-progress resizes are\ncompleted before proceeding. See the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#consistency\" title=\"mod papaya\">consistency</a>\nsection for details.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">for </span>(key, val) <span class=\"kw\">in </span>map.pin().iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"key: {key} val: {val}\"</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1032-1034\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.keys\" class=\"fn\">keys</a>&lt;'g, G&gt;(&amp;self, guard: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g G</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.Keys.html\" title=\"struct papaya::map::Keys\">Keys</a>&lt;'g, K, V, G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,</div></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all keys in arbitrary order.\nThe iterator element type is <code>&amp;K</code>.</p>\n<p>Note that this method will block until any in-progress resizes are\ncompleted before proceeding. See the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#consistency\" title=\"mod papaya\">consistency</a>\nsection for details.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">for </span>key <span class=\"kw\">in </span>map.pin().keys() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{key}\"</span>);\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.values\" class=\"method\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1064-1066\">Source</a><h4 class=\"code-header\">pub fn <a href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html#tymethod.values\" class=\"fn\">values</a>&lt;'g, G&gt;(&amp;self, guard: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'g G</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.Values.html\" title=\"struct papaya::map::Values\">Values</a>&lt;'g, K, V, G&gt;<div class=\"where\">where\n    G: <a class=\"trait\" href=\"https://docs.rs/seize/0.5.0/seize/guard/trait.Guard.html\" title=\"trait seize::guard::Guard\">Guard</a>,</div></h4></section></summary><div class=\"docblock\"><p>An iterator visiting all values in arbitrary order.\nThe iterator element type is <code>&amp;V</code>.</p>\n<p>Note that this method will block until any in-progress resizes are\ncompleted before proceeding. See the <a href=\"https://docs.rs/papaya/0.2.3/papaya/index.html#consistency\" title=\"mod papaya\">consistency</a>\nsection for details.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>papaya::HashMap;\n\n<span class=\"kw\">let </span>map = HashMap::from([\n    (<span class=\"string\">\"a\"</span>, <span class=\"number\">1</span>),\n    (<span class=\"string\">\"b\"</span>, <span class=\"number\">2</span>),\n    (<span class=\"string\">\"c\"</span>, <span class=\"number\">3</span>),\n]);\n\n<span class=\"kw\">for </span>value <span class=\"kw\">in </span>map.pin().values() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{value}\"</span>);\n}</code></pre></div></div></details></div></details>",0,"saluki_common::collections::FastConcurrentHashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1124-1128\">Source</a><a href=\"#impl-PartialEq-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1130\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","saluki_common::collections::FastConcurrentHashMap"],["<section id=\"impl-Eq-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#1142-1146\">Source</a><a href=\"#impl-Eq-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section>","Eq","saluki_common::collections::FastConcurrentHashMap"],["<section id=\"impl-Send-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#23\">Source</a><a href=\"#impl-Send-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","saluki_common::collections::FastConcurrentHashMap"],["<section id=\"impl-Sync-for-HashMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/papaya/0.2.3/src/papaya/map.rs.html#36\">Source</a><a href=\"#impl-Sync-for-HashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://docs.rs/papaya/0.2.3/papaya/map/struct.HashMap.html\" title=\"struct papaya::map::HashMap\">HashMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h3></section>","Sync","saluki_common::collections::FastConcurrentHashMap"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[83141]}