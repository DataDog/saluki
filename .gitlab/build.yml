.build-adp-definition:
  stage: build
  image: ${DOCKER_BUILD_IMAGE}
  needs:
    - calculate-build-metadata
  retry: 2
  timeout: 20m
  id_tokens:
    DDSIGN_ID_TOKEN:
      aud: image-integrity
  variables:
    # Compiling Rust is intensive. ¯\_(ツ)_/¯
    KUBERNETES_CPU_REQUEST: "16"
    KUBERNETES_MEMORY_REQUEST: "8Gi"
    KUBERNETES_MEMORY_LIMIT: "12Gi"
    APP_BUILD_TIME: "${CI_PIPELINE_CREATED_AT}"
    DDCI_CONFIGURE_OTEL_EXPORTER: true
  script:
    - docker buildx build
      --platform linux/amd64,linux/arm64
      --file ./docker/Dockerfile.agent-data-plane
      --metadata-file /tmp/build.metadata
      --tag ${IMAGE_TAG}
      --build-arg BUILD_IMAGE=${SALUKI_BUILD_CI_IMAGE}
      --build-arg APP_IMAGE=${GBI_BASE_IMAGE}
      --build-arg BUILD_PROFILE=${BUILD_PROFILE}
      --build-arg BUILD_FEATURES=${BUILD_FEATURES}
      --build-arg APP_FULL_NAME="${APP_FULL_NAME}"
      --build-arg APP_SHORT_NAME=${APP_SHORT_NAME}
      --build-arg APP_IDENTIFIER=${APP_IDENTIFIER}
      --build-arg APP_VERSION=${APP_VERSION}
      --build-arg APP_GIT_HASH=${APP_GIT_HASH}
      --build-arg APP_BUILD_TIME=${APP_BUILD_TIME}
      --build-arg APP_DEV_BUILD=${APP_DEV_BUILD}
      --label git.repository=${CI_PROJECT_NAME}
      --label git.branch=${CI_COMMIT_REF_NAME}
      --label git.commit=${CI_COMMIT_SHA}
      --label ci.pipeline_id=${CI_PIPELINE_ID}
      --label ci.job_id=${CI_JOB_ID}
      --label config.fips=${FIPS_ENABLED}
      --push
      .
    - ddsign sign ${IMAGE_TAG} --docker-metadata-file /tmp/build.metadata

.build-converged-adp-definition:
  stage: build
  image: ${DOCKER_BUILD_IMAGE}
  retry: 2
  timeout: 5m
  id_tokens:
    DDSIGN_ID_TOKEN:
      aud: image-integrity
  variables:
    DDCI_CONFIGURE_OTEL_EXPORTER: true
  script:
    - docker buildx build
      --platform linux/amd64,linux/arm64
      --file ./docker/Dockerfile.datadog-agent
      --metadata-file /tmp/build.metadata
      --build-arg "DD_AGENT_IMAGE=${DD_AGENT_IMAGE}"
      --build-arg "ADP_IMAGE=${ADP_IMAGE}"
      --tag "${CONVERGED_IMAGE_TAG}"
      --label git.repository=${CI_PROJECT_NAME}
      --label git.branch=${CI_COMMIT_REF_NAME}
      --label git.commit=${CI_COMMIT_SHA}
      --label ci.pipeline_id=${CI_PIPELINE_ID}
      --label ci.job_id=${CI_JOB_ID}
      --label target=prod
      --push
      .
    - ddsign sign ${CONVERGED_IMAGE_TAG} --docker-metadata-file /tmp/build.metadata

.upload-adp-symbols-definition:
  stage: build
  image: ${SALUKI_GENERAL_CI_IMAGE}
  before_script:
    - export DD_BETA_COMMANDS_ENABLED=1
    - export STAGING_DD_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.saluki.staging_dd_api_key --with-decryption --query "Parameter.Value" --out text)
    - export PROD_DD_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.saluki.prod_dd_api_key --with-decryption --query "Parameter.Value" --out text)
  parallel:
    matrix:
      - IMAGE_PLATFORM: ["linux/amd64", "linux/arm64"]
  script:
    # Pull the ADP container image and extract it to the filesystem so we can access the binaries.
    - crane --platform ${IMAGE_PLATFORM} export ${IMAGE_TAG} /tmp/adp.tar
    - mkdir /tmp/adp-image && tar -C /tmp/adp-image -x -f /tmp/adp.tar
    # Upload the debug symbols to staging.
    - DATADOG_API_KEY="${STAGING_DD_API_KEY}" DATADOG_SITE="datad0g.com" datadog-ci elf-symbols upload
      --repository-url https://github.com/DataDog/saluki
      /tmp/adp-image/usr/local/bin/agent-data-plane
    # Upload the debug symbols to production.
    - DATADOG_API_KEY="${PROD_DD_API_KEY}" DATADOG_SITE="datadoghq.com" datadog-ci elf-symbols upload
      --repository-url https://github.com/DataDog/saluki
      /tmp/adp-image/usr/local/bin/agent-data-plane

calculate-build-metadata:
  stage: build
  image: ${SALUKI_BUILD_CI_IMAGE}
  needs: []
  script:
    - make emit-build-metadata >> build.env
  artifacts:
    reports:
      dotenv: build.env

build-adp-image:
  extends: [.build-common-variables, .build-adp-definition]
  variables:
    IMAGE_TAG: ${ADP_DEBUG_IMAGE_TAG}

build-adp-image-fips:
  extends: [.build-common-variables, .build-adp-definition]
  variables:
    IMAGE_TAG: ${ADP_DEBUG_IMAGE_TAG_FIPS}
    BUILD_FEATURES: "fips"
    FIPS_ENABLED: "true"

build-adp-image-release:
  extends: [.build-common-variables, .build-adp-definition]
  rules:
    - if: !reference [.on_official_release, rules, if]
  variables:
    IMAGE_TAG: ${ADP_RELEASE_IMAGE_TAG}
    APP_DEV_BUILD: "false"

build-adp-image-release-fips:
  extends: [.build-common-variables, .build-adp-definition]
  rules:
    - if: !reference [.on_official_release, rules, if]
  variables:
    IMAGE_TAG: ${ADP_RELEASE_IMAGE_TAG_FIPS}
    BUILD_FEATURES: "fips"
    FIPS_ENABLED: "true"
    APP_DEV_BUILD: "false"

build-converged-adp-image:
  extends: [.build-common-variables, .build-converged-adp-definition]
  needs:
    - build-adp-image
  variables:
    DD_AGENT_IMAGE: ${INTERNAL_DD_AGENT_IMAGE}
    ADP_IMAGE: ${ADP_DEBUG_IMAGE_TAG}
    CONVERGED_IMAGE_TAG: "${INTERNAL_DD_AGENT_IMAGE}-adp-${CI_COMMIT_SHORT_SHA}"

build-converged-adp-image-fips:
  extends: [.build-common-variables, .build-converged-adp-definition]
  needs:
    - build-adp-image-fips
  variables:
    DD_AGENT_IMAGE: ${INTERNAL_DD_AGENT_IMAGE_FIPS}
    ADP_IMAGE: ${ADP_DEBUG_IMAGE_TAG_FIPS}
    CONVERGED_IMAGE_TAG: "${INTERNAL_DD_AGENT_IMAGE_FIPS}-adp-${CI_COMMIT_SHORT_SHA}"

publish-internal-adp-image:
  stage: build
  extends: [.build-common-variables]
  needs:
    - build-adp-image
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    # We always build off of the current ADP image for this commit SHA, which is our non-FIPS "debug" build.
    IMAGE_NAME: agent-data-plane
    IMAGE_VERSION: tmpl-v1
    TMPL_SRC_REPO: ${ADP_IMAGE_REPO_NAME}
    TMPL_SRC_IMAGE: ${CI_COMMIT_SHORT_SHA}
    RELEASE_TAG: "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
    BUILD_TAG: "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

upload-adp-symbols:
  extends: [.build-common-variables, .upload-adp-symbols-definition]
  needs:
    - build-adp-image
  variables:
    IMAGE_TAG: ${ADP_DEBUG_IMAGE_TAG}

upload-adp-symbols-fips:
  extends: [.build-common-variables, .upload-adp-symbols-definition]
  needs:
    - build-adp-image-fips
  variables:
    IMAGE_TAG: ${ADP_DEBUG_IMAGE_TAG_FIPS}

upload-adp-release-symbols:
  extends: [.build-common-variables, .upload-adp-symbols-definition]
  rules:
    - if: !reference [.on_official_release, rules, if]
  needs:
    - build-adp-image-release
  variables:
    IMAGE_TAG: ${ADP_RELEASE_IMAGE_TAG}

upload-adp-release-symbols-fips:
  extends: [.build-common-variables, .upload-adp-symbols-definition]
  rules:
    - if: !reference [.on_official_release, rules, if]
  needs:
    - build-adp-image-release-fips
  variables:
    IMAGE_TAG: ${ADP_RELEASE_IMAGE_TAG_FIPS}
