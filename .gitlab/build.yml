.build-adp-definition:
  stage: build
  image: ${DOCKER_BUILD_IMAGE}
  retry: 2
  timeout: 20m
  variables:
    # Compiling Rust is intensive. ¯\_(ツ)_/¯
    KUBERNETES_CPU_REQUEST: "16"
    KUBERNETES_MEMORY_REQUEST: "8Gi"
    KUBERNETES_MEMORY_LIMIT: "12Gi"
    APP_BUILD_TIME: "${CI_PIPELINE_CREATED_AT}"
    DDCI_CONFIGURE_OTEL_EXPORTER: true
  script:
    - source $(make emit-build-metadata)
    - 'echo "Building ADP image ${IMAGE_TAG}... (image version: ${ADP_IMAGE_VERSION})..."'
    - docker buildx build
      --platform linux/amd64,linux/arm64
      --file ./docker/Dockerfile.agent-data-plane
      --metadata-file /tmp/build.metadata
      --tag ${IMAGE_TAG}
      --build-arg BUILD_IMAGE=${ADP_BUILD_IMAGE}
      --build-arg APP_IMAGE=${ADP_APP_IMAGE}
      --build-arg BUILD_PROFILE=${BUILD_PROFILE}
      --build-arg BUILD_FEATURES=${BUILD_FEATURES}
      --build-arg APP_FULL_NAME="${APP_FULL_NAME}"
      --build-arg APP_SHORT_NAME=${APP_SHORT_NAME}
      --build-arg APP_IDENTIFIER=${APP_IDENTIFIER}
      --build-arg APP_VERSION=${APP_VERSION}
      --build-arg APP_GIT_HASH=${APP_GIT_HASH}
      --build-arg APP_BUILD_TIME=${APP_BUILD_TIME}
      --build-arg APP_DEV_BUILD=${APP_DEV_BUILD}
      --label "org.opencontainers.image.authors=Datadog <package@datadoghq.com>"
      --label "org.opencontainers.image.base.name=${ADP_APP_IMAGE}"
      --label "org.opencontainers.image.created=${CI_PIPELINE_CREATED_AT}"
      --label "org.opencontainers.image.ref.name=agent-data-plane"
      --label "org.opencontainers.image.revision=${CI_COMMIT_SHA}"
      --label "org.opencontainers.image.source=https://github.com/DataDog/saluki"
      --label "org.opencontainers.image.title=Agent Data Plane"
      --label "org.opencontainers.image.vendor=Datadog, Inc."
      --label "org.opencontainers.image.version=${ADP_IMAGE_VERSION}"
      --push
      .

build-adp-image:
  extends: [.build-common-variables, .build-adp-definition]
  variables:
    IMAGE_TAG: "${ADP_IMAGE_BASE}:${ADP_IMAGE_VERSION}"

build-adp-image-fips:
  extends: [.build-common-variables, .build-adp-definition]
  variables:
    IMAGE_TAG: "${ADP_IMAGE_BASE}:${ADP_IMAGE_VERSION}-fips"
    BUILD_FEATURES: "fips"
    FIPS_ENABLED: "true"

# Finally, we publish our internal images after running through a small build process to add some necessary tooling
# required for the images to be deployed/used internally.
#
# These takes them from the sort of temporary holding ground of `registry.ddbuild.io/saluki/agent-data-plane`, adds the
# necessary pieces, and then publishes them to `registry.ddbuild.io/agent-data-plane` as a first-class citizen.
#
# We specifically duplicate our `ADP_INTERNAL_IMAGE_TAG` (and FIPS-specific variant) tag and construct the same value
# manually because otherwise, the variable is evaluated in the downstream job, leading to the wrong values being
# substituted.
publish-adp-image-internal:
  stage: build
  extends: [.build-common-variables]
  needs:
    - build-adp-image
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_NAME: agent-data-plane
    IMAGE_VERSION: tmpl-v1
    TMPL_SRC_REPO: ${ADP_IMAGE_REPO_NAME}
    TMPL_SRC_IMAGE: ${ADP_IMAGE_VERSION}
    RELEASE_TAG: ${ADP_IMAGE_VERSION}
    BUILD_TAG: "${ADP_IMAGE_VERSION}-build"
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

publish-adp-image-internal-fips:
  stage: build
  extends: [.build-common-variables]
  needs:
    - build-adp-image-fips
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_NAME: agent-data-plane
    IMAGE_VERSION: tmpl-v1
    TMPL_SRC_REPO: ${ADP_IMAGE_REPO_NAME}
    TMPL_SRC_IMAGE: "${ADP_IMAGE_VERSION}-fips"
    RELEASE_TAG: "${ADP_IMAGE_VERSION}-fips"
    BUILD_TAG: "${ADP_IMAGE_VERSION}-fips-build"
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

display-image-tags:
  extends: [.build-common-variables]
  stage: build
  needs:
    - build-adp-image
    - build-adp-image-fips
    - publish-adp-image-internal
    - publish-adp-image-internal-fips
  script:
    - |-
      cat <<EOF
      # ADP Image Tags

      ## Internal (baked with necessary tools for internal deployments)
      Non-FIPS: ${ADP_IMAGE_BASE}:${ADP_IMAGE_VERSION}
      FIPS:     ${ADP_IMAGE_BASE}:${ADP_IMAGE_VERSION}-fips
      EOF
