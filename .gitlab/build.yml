.build-adp-definition:
  image: ${DOCKER_BUILD_IMAGE}
  needs:
    - calculate-build-metadata
  retry: 2
  timeout: 20m
  variables:
    # Compiling Rust is intensive. ¯\_(ツ)_/¯
    KUBERNETES_CPU_REQUEST: "16"
    KUBERNETES_MEMORY_REQUEST: "8Gi"
    KUBERNETES_MEMORY_LIMIT: "12Gi"
    APP_BUILD_TIME: "${CI_PIPELINE_CREATED_AT}"
    DDCI_CONFIGURE_OTEL_EXPORTER: true
  script:
    - docker buildx build
      --platform linux/amd64,linux/arm64
      --file ./docker/Dockerfile.agent-data-plane
      --tag ${TARGET_IMAGE}
      --build-arg BUILD_IMAGE=${BUILD_IMAGE}
      --build-arg APP_IMAGE=${APP_IMAGE}
      --build-arg BUILD_PROFILE=${BUILD_PROFILE}
      --build-arg BUILD_FEATURES=${BUILD_FEATURES}
      --build-arg APP_FULL_NAME="${APP_FULL_NAME}"
      --build-arg APP_SHORT_NAME=${APP_SHORT_NAME}
      --build-arg APP_IDENTIFIER=${APP_IDENTIFIER}
      --build-arg APP_VERSION=${APP_VERSION}
      --build-arg APP_GIT_HASH=${APP_GIT_HASH}
      --build-arg APP_BUILD_TIME=${APP_BUILD_TIME}
      --build-arg APP_DEV_BUILD=${APP_DEV_BUILD}
      --label "org.opencontainers.image.authors=Datadog <package@datadoghq.com>"
      --label "org.opencontainers.image.base.name=${APP_IMAGE}"
      --label "org.opencontainers.image.created=${CI_PIPELINE_CREATED_AT}"
      --label "org.opencontainers.image.ref.name=agent-data-plane"
      --label "org.opencontainers.image.revision=${CI_COMMIT_SHA}"
      --label "org.opencontainers.image.source=https://github.com/DataDog/saluki"
      --label "org.opencontainers.image.title=Agent Data Plane"
      --label "org.opencontainers.image.vendor=Datadog, Inc."
      --label "org.opencontainers.image.version=${IMAGE_VERSION}"
      --push
      .

calculate-build-metadata:
  stage: build
  image: ${SALUKI_BUILD_CI_IMAGE}
  needs: []
  script:
    - make emit-build-metadata >> build.env
  artifacts:
    reports:
      dotenv: build.env

# Build our "internal" ADP images.
#
# These images only contain Agent Data Plane, but they're not yet suitable for either internal deployment or public
# images, as there are additional modifications required for those use cases. We use these images as the base for those
# depending on how this pipeline is invoked.
build-adp-image-internal:
  stage: build
  extends: [.build-common-variables, .build-adp-definition]
  variables:
    BUILD_IMAGE: ${BASE_BUILD_IMAGE_INTERNAL}
    APP_IMAGE: ${BASE_APP_IMAGE_INTERNAL}
    TARGET_IMAGE: "${ADP_IMAGE_INTERNAL}:${ADP_IMAGE_VERSION}"
    IMAGE_VERSION: ${ADP_IMAGE_VERSION}

build-adp-image-internal-fips:
  stage: build
  extends: [.build-common-variables, .build-adp-definition]
  variables:
    BUILD_FEATURES: "fips"
    FIPS_ENABLED: "true"
    BUILD_IMAGE: ${BASE_BUILD_IMAGE_INTERNAL}
    APP_IMAGE: ${BASE_APP_IMAGE_INTERNAL}
    TARGET_IMAGE: "${ADP_IMAGE_INTERNAL}:${ADP_IMAGE_VERSION}-fips"
    IMAGE_VERSION: "${ADP_IMAGE_VERSION}-fips"

# Build our "release" ADP images.
#
# These images are basically identical to the "internal" images, but with two main tweaks: we use a different base "app"
# image, and we tweak an environment variable to ensure that the reported build info from the binary is suitable for a
# versioned release.
#
# We use a different base "app" image as our internal base image isn't certified for public consumption, and instead we
# use something closer to a plain Ubuntu image.
build-adp-image-release:
  stage: build
  extends: [.build-common-variables, .build-adp-definition]
  rules:
    - if: !reference [.on_official_release, rules, if]
  variables:
    BUILD_IMAGE: ${BASE_BUILD_IMAGE_RELEASE}
    APP_IMAGE: ${BASE_APP_IMAGE_RELEASE}
    TARGET_IMAGE: "${ADP_IMAGE_RELEASE}:${ADP_IMAGE_VERSION}"
    IMAGE_VERSION: ${ADP_IMAGE_VERSION}

build-adp-image-release-fips:
  stage: build
  extends: [.build-common-variables, .build-adp-definition]
  rules:
    - if: !reference [.on_official_release, rules, if]
  variables:
    BUILD_FEATURES: "fips"
    FIPS_ENABLED: "true"
    BUILD_IMAGE: ${BASE_BUILD_IMAGE_RELEASE}
    APP_IMAGE: ${BASE_APP_IMAGE_RELEASE}
    TARGET_IMAGE: "${ADP_IMAGE_RELEASE}:${ADP_IMAGE_VERSION}-fips"
    IMAGE_VERSION: "${ADP_IMAGE_VERSION}-fips"

# Publish our internal images to be used for internal deployments.
#
# Publishing is a slight misnomer as the step also involves building a new image which is the one that gets pushed...
# but that image has a number of modifications to make it suitable for internal deployment.
publish-adp-image-internal:
  stage: build
  extends: [.build-common-variables]
  needs:
    - build-adp-image-internal
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_NAME: agent-data-plane
    IMAGE_VERSION: tmpl-v1
    TMPL_SRC_REPO: ${ADP_IMAGE_REPO_INTERNAL}
    TMPL_SRC_IMAGE: ${ADP_IMAGE_VERSION}
    RELEASE_TAG: ${ADP_IMAGE_VERSION}
    BUILD_TAG: "${ADP_IMAGE_VERSION}-build"
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

publish-adp-image-internal-fips:
  stage: build
  extends: [.build-common-variables]
  needs:
    - build-adp-image-internal-fips
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_NAME: agent-data-plane
    IMAGE_VERSION: tmpl-v1
    TMPL_SRC_REPO: ${ADP_IMAGE_REPO_INTERNAL}
    TMPL_SRC_IMAGE: "${ADP_IMAGE_VERSION}-fips"
    RELEASE_TAG: "${ADP_IMAGE_VERSION}-fips"
    BUILD_TAG: "${ADP_IMAGE_VERSION}-fips-build"
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

display-image-tags:
  extends: [.build-common-variables]
  stage: build
  needs:
    - build-adp-image-internal
    - build-adp-image-internal-fips
    - publish-adp-image-internal
    - publish-adp-image-internal-fips
  script:
    - |-
      cat <<EOF
      # ADP Image Tags

      ## Internal (baked with necessary tools for internal deployments)
      Non-FIPS: ${BASE_IMAGE_REGISTRY}/agent-data-plane:${ADP_IMAGE_VERSION}
      FIPS:     ${BASE_IMAGE_REGISTRY}/agent-data-plane:${ADP_IMAGE_VERSION}-fips
      EOF
